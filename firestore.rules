rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/admins/$(getUserId()));
    }
    
    function isSupervisor() {
      return isAuthenticated() && exists(/databases/$(database)/documents/supervisors/$(getUserId()));
    }
    
    function getSupervisorData() {
      return get(/databases/$(database)/documents/supervisors/$(getUserId())).data;
    }
    
    function isReportAssignedToSupervisor(reportData) {
      return isSupervisor() && (
        reportData.assignedDept == getSupervisorData().dept ||
        reportData.assignedTo == getUserId()
      );
    }

    // Reports collection
    match /reports/{reportId} {
      // Read access
      allow read: if isAuthenticated() && (
        // Admins can read all reports
        isAdmin() ||
        // Supervisors can read reports assigned to their department or to them
        isReportAssignedToSupervisor(resource.data) ||
        // Users can read their own reports (for mobile app)
        resource.data.uid == getUserId()
      );
      
      // Write access for creating new reports (mobile app)
      allow create: if isAuthenticated() && 
        request.auth.uid == resource.data.uid &&
        // Ensure required fields are present
        resource.data.keys().hasAll(['uid', 'description', 'issueType', 'issueLabel', 'status', 'createdAt', 'updatedAt']) &&
        // Ensure status is submitted for new reports
        resource.data.status == 'submitted' &&
        // Ensure statusHistory is initialized
        resource.data.statusHistory is list;
      
      // Update access
      allow update: if isAuthenticated() && (
        // Admins can update all fields
        isAdmin() ||
        // Supervisors can only update specific fields for their assigned reports
        (isSupervisor() && 
         isReportAssignedToSupervisor(resource.data) &&
         // Supervisors can only update status, statusHistory, and updatedAt
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'statusHistory', 'updatedAt']) &&
         // Ensure status transitions are valid
         request.resource.data.status in ['acknowledged', 'in_progress', 'resolved'])
      );
      
      // Delete access (admin only)
      allow delete: if isAdmin();
    }

    // Admins collection
    match /admins/{adminId} {
      // Only admins can read admin documents
      allow read: if isAdmin();
      // Only existing admins can create new admin documents
      allow create: if isAdmin();
      // Only admins can update admin documents
      allow update: if isAdmin();
      // Only admins can delete admin documents
      allow delete: if isAdmin();
    }

    // Supervisors collection
    match /supervisors/{supervisorId} {
      // Admins can read all supervisor documents
      // Supervisors can read their own document
      allow read: if isAuthenticated() && (
        isAdmin() || 
        supervisorId == getUserId()
      );
      // Only admins can create supervisor documents
      allow create: if isAdmin();
      // Only admins can update supervisor documents
      allow update: if isAdmin();
      // Only admins can delete supervisor documents
      allow delete: if isAdmin();
    }

    // Departments collection
    match /departments/{deptId} {
      // Authenticated users can read department information
      allow read: if isAuthenticated();
      // Only admins can modify departments
      allow write: if isAdmin();
    }

    // Categories collection
    match /categories/{categoryId} {
      // Authenticated users can read categories
      allow read: if isAuthenticated();
      // Only admins can modify categories
      allow write: if isAdmin();
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
